
volume 


empty dir 

apiVersion: v1
kind: Pod
metadata:
  name: myvolumes-pod
spec:
  containers:
  - image: centos
    imagePullPolicy: IfNotPresent
    name: myvolumes-container-1
    command: ['sh', '-c', 'echo The Bench Container 1 is Running ; sleep 3600']
    volumeMounts:
    - mountPath: /demo1
      name: demo-volume

  - image: ubuntu  
    imagePullPolicy: IfNotPresent
    name: myvolumes-container-2
    command: ['/bin/bash', '-c', 'echo The Bench Container 2 is Running ; sleep 3600']
    volumeMounts:
    - mountPath: /demo2
      name: demo-volume

  - image: alpine
    imagePullPolicy: IfNotPresent
    name: myvolumes-container-3
    command: ['sh', '-c', 'echo The Bench Container 3 is Running ; sleep 3600']    
    volumeMounts:
    - mountPath: /demo3
      name: demo-volume

  volumes:
  - name: demo-volume
    emptyDir: {}




apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
     tier: frontend
spec:
  containers:
   - name: nginx
     image: nginx
     ports:
      - containerPort: 80
     volumeMounts:
       - name: nginx-vol
         mountPath: /usr/share/nginx/html/
  volumes:
   - name: nginx-vol
     emptyDir: {}
     
     
     



  kubectl create -f https://raw.githubusercontent.com/lerndevops/educka/master/storage/vol-emptyDir-ex2.yml
  kubectl get pod
  kubectl describe pod myvolumes-pod
  kubectl get events
  kubectl exec -it myvolumes-pod -c myvolumes-container-1 -- bash  touch /demo1/container-1
  kubectl exec -it myvolumes-pod -c myvolumes-container-2 -- bash  touch /demo2/container-2
  kubectl exec -it myvolumes-pod -c myvolumes-container-3 -- sh    touch /demo3/container-3

  we can see empty dir volume is used across 3 pods with different image 




Persistance volume 


apiVersion: v1
kind: Pod
metadata:
  name: hostpath-vol-pod1
spec:
  containers:
   - name: test-container
     image: busybox
     command: ['sh', '-c', 'sleep 3600']
     volumeMounts:
      - name: hostpath-volume
        mountPath: /test
  volumes:
   - name: hostpath-volume
     hostPath:
       path: /tmp/data      # directory location on host
       type: Directory  # this field is optional
       
       
       

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
  labels:
    type: local
spec:
  storageClassName: standard
  persistentVolumeReclaimPolicy: Recycle ## Retain / Delete
  capacity:
    storage: 1000Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/pvdata

# Class: A PV can have a class, which is specified by setting the storageClassName attribute to the name of a StorageClass. A PV of a particular class can only be bound to PVCs requesting that class.
# A PV with no storageClassName has no class and can only be bound to PVCs that request no particular class


# Access modes
   # ReadWriteOnce – the volume can be mounted as read-write by a single node ... RWO
   # ReadOnlyMany – the volume can be mounted read-only by many nodes ... ROX
   # ReadWriteMany – the volume can be mounted as read-write by many nodes ... RWX

# The Retain reclaim policy allows for manual reclamation of the resource. When the PersistentVolumeClaim is deleted, the PersistentVolume still exists and the volume is considered "released". But it is not yet available for another claim bec ause the previous claimant's data remains on the volume




apiVersion: v1
kind: Pod
metadata:
  name: pod-gitrepo-vol
  labels:
    app: myapp
spec:
  containers:
   - name: web
     image: nginx:alpine
     ports:
      - protocol: TCP
        containerPort: 80
     volumeMounts:
      - name: html
        mountPath: /usr/share/nginx/html/
        readOnly: true
  volumes:
    - name: html
      gitRepo:
        repository: https://github.com/lerndevops/nginx.git
        revision: master
        directory: .
        
        






# StorageClass

StorageClass is a mechanism of defining different classes of storages in kubernetes. Your Kubernetes administrator along with your storage administrator might classify different types of storages available in your organization and make a reference of it in kubernetes. These storageclasses can then be directly referenced in a Persistent Volume Claim which can later be assigned to a pod. 

StorageClass definition requires the below information - 

* Provisioners - AWSElasticBlockStore, AzureFile, AzureDisk, GCEPersistentDisk, Glusterfs, iSCSI, NFS, VsphereVolume etc.
* Parameters - type of storage (pd,ssd,magnetic), diskformat, datastore etc. 
* Reclaim Polcy - Retain or Delete

Kubernetes ships some provisioners which are also called as internal provisioners. Some examples are EBS, Azure Disk, GCE PD etc. These internal provisioners are usually referred with a prefix of `kubernetes.io`. The kubernetes incubator repository also has a variety of external provisioners which can be used with storage types that dont have an internal provisioners. Few examples of external provisioners are - AWS EFS provisioner, CephFS, iSCSI, FlexVolumes, etc. 

Storage classes helps in dynamic provisioning of PV. Which means that your developers/devops need not worry about PV provisioning before hand. Your kubernetes administrator can set a default storage class for your cluster. If a PVC doesnt specify a PV or a storage class name, the default storage class is used. This PVC then automatically creates a new PV and the corresponding storage is then assigned. 

Managed kubernetes services like AKS, EKS and GKE provides a default storage class which points to their respective disk storage. 

## Creating a dynamic PVC on top of GKE 

**PRE-REQUISITE** - A provisioned GKE cluster 

Create a basic PVC yaml - 

```
vi pvc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: storageclassdemo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 30Gi

```

We are not defining any storageclass in above PVC, which means it will point to the default storage class. 

Now lets check the default storage class in gke - 

```
kubectl get storageclass

NAME                 PROVISIONER            AGE
standard (default)   kubernetes.io/gce-pd   120m

```

We will now view the yaml of this storage class 

```
kubectl get storageclass standard -o yaml

allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  creationTimestamp: "2019-11-27T17:22:58Z"
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
    kubernetes.io/cluster-service: "true"
  name: standard
  resourceVersion: "298"
  selfLink: /apis/storage.k8s.io/v1/storageclasses/standard
  uid: 8e8b089a-113a-11ea-8807-42010a8e0194
parameters:
  type: pd-standard
provisioner: kubernetes.io/gce-pd
reclaimPolicy: Delete
volumeBindingMode: Immediate

```

Below are some important details - 

provisioner: kubernetes.io/gce-pd
reclaimPolicy: Delete
parameters: type: pd-standard


Lets now create the pvc and see what happens - 

```
kubectl create -f pvc.yaml 

NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                      STORAGECLASS   REASON   AGE
persistentvolume/pvc-a0afb7ee-114b-11ea-8807-42010a8e0194   30Gi       RWO            Delete           Bound    default/storageclassdemo   standard                2s

NAME                                     STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
persistentvolumeclaim/storageclassdemo   Bound    pvc-a0afb7ee-114b-11ea-8807-42010a8e0194   30Gi       RWO            standard       6s

```

A dynamic PV is now provisioned. 

Verify on your GCP account -> Compute Engine -> Disks to see if a new disk is dynamically created of 15GB.





create a storgate disk in google cloud 

create PVC  And access mode is important 

pvc-sc-standard.yml


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-pvc1
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20000Mi
      
      


pvc-sc-fast.yml


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sc-pvc 
spec:
  storageClassName: fast
  resources:
    requests:
      storage: 10Gi
  accessModes:
    - ReadWriteOnce



pod-sc.yml

apiVersion: v1
kind: Pod
metadata:
  name: sc-pvc-pod
spec:
  containers:
   - name: myvolumes-container
     image: alpine
     imagePullPolicy: IfNotPresent
     command: ['sh', '-c', 'echo Container 1 is Running ; sleep 3600']
     volumeMounts:
      - name: pv
        mountPath: "/my-pv-path"
  volumes:
   - name: pv
     persistentVolumeClaim:
       claimName: my-pvc1




sc-gcp-pdssd.yml

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: fast
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd








apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
  labels:
    type: local
spec:
  storageClassName: standard
  persistentVolumeReclaimPolicy: Recycle ## Retain / Delete
  capacity:
    storage: 1000Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/pvdata

# Class: A PV can have a class, which is specified by setting the storageClassName attribute to the name of a StorageClass. A PV of a particular class can only be bound to PVCs requesting that class.
# A PV with no storageClassName has no class and can only be bound to PVCs that request no particular class


# Access modes
   # ReadWriteOnce – the volume can be mounted as read-write by a single node ... RWO
   # ReadOnlyMany – the volume can be mounted read-only by many nodes ... ROX
   # ReadWriteMany – the volume can be mounted as read-write by many nodes ... RWX

# The Retain reclaim policy allows for manual reclamation of the resource. When the PersistentVolumeClaim is deleted, the PersistentVolume still exists and the volume is considered "released". But it is not yet available for another claim bec ause the previous claimant's data remains on the volum









