Environment variables:
======================

Environemnt variables are for containers.

spec:
 containers:
 - name: c-name
   image: nginx
   env:
   - name: variablename
     value: variablevalue
     
  
Configmaps:
============

1. To get the configmaps
kubectl get configmaps

2. To describe configmaps
kubectl describe cm db-config

3. Create a new ConfigMap for the 'webapp-color' POD. Use the spec given on the right.
ConfigName Name: webapp-config-map
Data: APP_COLOR=darkblue

master $ kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue
configmap/webapp-config-map created
master $ kubectl get cm
NAME                DATA   AGE
db-config           3      9m18s
webapp-config-map   1      5s
master $

4. configmap using envFrom and configMapRef
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      envFrom:
      - configMapRef:
          name: special-config
  restartPolicy: Never
--------------------- 

spec:
  containers:
  - envFrom:
    - configMapRef:
       name: webapp-config-map
    image: kodekloud/webapp-color
    imagePullPolicy: Always
    name: webapp-color  
   
5. configmap with env and configMapKeyRef 

Define container environment variables with data from multiple ConfigMaps
As with the previous example, create the ConfigMaps first.

configmap/configmaps.yaml Copy configmap/configmaps.yaml to clipboard	
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-config
  namespace: default
data:
  special.how: very
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-config
  namespace: default
data:
  log_level: INFO
Create the ConfigMap:

kubectl create -f https://kubernetes.io/examples/configmap/configmaps.yaml
Define the environment variables in the Pod specification.

pods/pod-multiple-configmap-env-variable.yaml Copy pods/pod-multiple-configmap-env-variable.yaml to clipboard	
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        - name: SPECIAL_LEVEL_KEY
          valueFrom:
            configMapKeyRef:
              name: special-config
              key: special.how
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: env-config
              key: log_level
  restartPolicy: Never
Create the Pod:

kubectl create -f https://kubernetes.io/examples/pods/pod-multiple-configmap-env-variable.yaml
Now, the Pod's output includes environment variables SPECIAL_LEVEL_KEY=very and LOG_LEVEL=INFO

6. Populate a Volume with data stored in a ConfigMap
Add the ConfigMap name under the volumes section of the Pod specification. This adds the ConfigMap data to the directory specified as volumeMounts.mountPath (in this case, /etc/config). The command section lists directory files with names that match the keys in ConfigMap.

pods/pod-configmap-volume.yaml Copy pods/pod-configmap-volume.yaml to clipboard	
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh", "-c", "ls /etc/config/" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        # Provide the name of the ConfigMap containing the files you want
        # to add to the container
        name: special-config
  restartPolicy: Never
Create the Pod:

kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-volume.yaml
When the pod runs, the command ls /etc/config/ produces the output below:

SPECIAL_LEVEL
SPECIAL_TYPE


7. Add ConfigMap data to a specific path in the Volume
Use the path field to specify the desired file path for specific ConfigMap items. In this case, the SPECIAL_LEVEL item will be mounted in the config-volume volume at /etc/config/keys.

pods/pod-configmap-volume-specific-key.yaml Copy pods/pod-configmap-volume-specific-key.yaml to clipboard	
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: k8s.gcr.io/busybox
      command: [ "/bin/sh","-c","cat /etc/config/keys" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
        items:
        - key: SPECIAL_LEVEL
          path: keys
  restartPolicy: Never
Create the Pod:

kubectl create -f https://kubernetes.io/examples/pods/pod-configmap-volume-specific-key.yaml
When the pod runs, the command cat /etc/config/keys produces the output below:

very

----------------------------------------------------------------------------------------------------------------------

Secrets:
==============

1. The reason the application is failed is because we have not created the secrets yet. Create a new Secret named 'db-secret' with the data given(on the right).
You may follow any one of the methods discussed in lecture to create the secret.

info_outline
Hint
Secret Name: db-secret
Secret 1: DB_Host=sql01
Secret 2: DB_User=root
Secret 3: DB_Password=password123

master $ kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123
secret/db-secret created
master $ kubectl get secrets
NAME                  TYPE                                  DATA   AGE
db-secret             Opaque                                3      16s
default-token-vh659   kubernetes.io/service-account-token   3      48m

2. Configure webapp-pod to load environment variables from the newly created secret.
Delete and recreate the pod if required.

info_outline
Hint
Pod name: webapp-pod
Image name: kodekloud/simple-webapp-mysql
Env From: Secret=db-secret

spec:
  containers:
  - image: kodekloud/simple-webapp-mysql
    imagePullPolicy: Always
    name: webapp
    envFrom:
    - secretRef:
       name: db-secret
    resources: {}
    
