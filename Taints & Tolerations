1. To check the number of nodes

kubectl get nodes -o wide

2. To check taints on node01

master $ kubectl describe node node01 | grep -i taint
Taints:             <none>
master $

3.Create a taint on node01 with key of 'spray', value of 'mortein' and effect of 'NoSchedule'

master $ kubectl taint node node01 spray=mortein:NoSchedule
node/node01 tainted
master $ kubectl describe node node01 | grep -i taint
Taints:             spray=mortein:NoSchedule
master $


4. Create another pod named 'bee' with the NGINX image, which has a toleration set to the taint Mortein

Image name: nginx
Key: spray
Value: mortein
Effect: NoSchedule
Status: Running

kubectl run bee --image=nginx $gen > bee.yaml
add tolerations in pod yaml file

master $ cat bee.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: bee
  name: bee
spec:
  tolerations:
  - key: spray
    operator: "Equal"
    value: "mortein"
    effect: "NoSchedule"
  containers:
  - image: nginx
    name: bee
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
master $

kubectl create -f bee.yaml

5. How to untaint a node

master $ kubectl describe node master | grep -i taint
Taints:             node-role.kubernetes.io/master:NoSchedule
master $
master $ kubectl taint node master node-role.kubernetes.io/master:NoSchedule-
node/master untainted
master $ kubectl describe node master | grep -i taint
Taints:             <none>
master $




how to 

kubectl taint node node1 per=police
kubectl taint node node1 per=police:NoSchedule
kubectl taint node node2 type=army:NoExecute

to remove taint 
kubectl taint node node2 type=army:NoExecute-

kubectl describe node master |grep -i taint



apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeserve
spec:
  replicas: 5
  selector:
    matchLabels:
      app: kubeserve
  template:
    metadata:
      name: kubeserve
      labels:
        app: kubeserve
    spec:
      tolerations:
        - key: covid
          operator: "Equals"
          value: "true"
          effect: "NoSchedule"
      containers:
      - image: leaddevops/kubeserve:v1
        name: app





apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
      - containerPort: 80
  tolerations:
  #- key: env
  #  operator: "Exists"
  #  effect: "NoExecute"
   - key: person
     operator: "Equal"
     value: police 
     effect: "NoSchedule"


#    operator: "Exists"/"Equal"
#    effect: "NoSchedule"/"PreferNoSchedule"/"NoExecute"



kubectl taint node k8node2 type=army:NoExecute
  vi pod2.yaml



apiVersion: v1
kind: Pod
metadata:
  name: tol-pod2
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
      - containerPort: 80
  tolerations:
          #  - key: per
#    operator: "Exists"
#    effect: "NoExecute"
   - key: type
     operator: "Equal"
     value: army
     effect: "NoExecute"


kubectl create -f pod2.yaml

root@k8master-1:~# kubectl get pod -o wide
NAME       READY   STATUS    RESTARTS   AGE   IP                NODE      NOMINATED NODE   READINESS GATES
tol-pod2   1/1     Running   0          62s   192.168.184.154   k8node2   <none>           <none>
root@k8master-1:~#




[root@master ~]# kubectl taint nodes node1.rmohan.com key:NoSchedule
node/node1.rmohan.com tainted
[root@master ~]# kubectl get node -o custom-columns=NAME:.metadata.name,TAINT:.spec.taints[*].effect | grep -v NoSchedule
NAME                TAINT
node2.rmohan.com    <none>
node3.rmohan.com    <none>
[root@master ~]# kubectl get node -o custom-columns=NAME:.metadata.name,TAINT:.spec.taints[*].effect | grep  NoSchedule
master.rmohan.com   NoSchedule
node1.rmohan.com    NoSchedule
[root@master ~]# kubectl taint nodes node1.rmohan.com key:NoSchedule-
node/node1.rmohan.com untainted
[root@master ~]# kubectl get node -o custom-columns=NAME:.metadata.name,TAINT:.spec.taints[*].effect | grep  NoSchedule
master.rmohan.com   NoSchedule
[root@master ~]#


